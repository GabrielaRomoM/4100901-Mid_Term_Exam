
4100901-Mid_Term_Exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003334  08003334  00004334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d8  080033d8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080033d8  080033d8  000043d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e0  080033e0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e0  080033e0  000043e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033e4  080033e4  000043e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  080033f4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080033f4  000050d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3be  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001779  00000000  00000000  0000f3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00010b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c1  00000000  00000000  00011448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c35  00000000  00000000  00011b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a800  00000000  00000000  0003673e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3c36  00000000  00000000  00040f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124b74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002324  00000000  00000000  00124bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00126edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800331c 	.word	0x0800331c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800331c 	.word	0x0800331c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	//turn left button settings
	if (GPIO_Pin == B1_Pin) {
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d119      	bne.n	80004fc <HAL_GPIO_EXTI_Callback+0x44>
		left_on = 1 ;
 80004c8:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <HAL_GPIO_EXTI_Callback+0x84>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() < (left_last_press_tick + 500)) { // if last press was in the last 500ms
 80004ce:	f000 fb1b 	bl	8000b08 <HAL_GetTick>
 80004d2:	4602      	mov	r2, r0
 80004d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <HAL_GPIO_EXTI_Callback+0x88>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80004dc:	429a      	cmp	r2, r3
 80004de:	d204      	bcs.n	80004ea <HAL_GPIO_EXTI_Callback+0x32>
			left_toggles = 0xFFFFFF; // a long time toggling (infinite)
 80004e0:	4b18      	ldr	r3, [pc, #96]	@ (8000544 <HAL_GPIO_EXTI_Callback+0x8c>)
 80004e2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	e002      	b.n	80004f0 <HAL_GPIO_EXTI_Callback+0x38>
		}else{
			left_toggles = 6; // Blink 3 times
 80004ea:	4b16      	ldr	r3, [pc, #88]	@ (8000544 <HAL_GPIO_EXTI_Callback+0x8c>)
 80004ec:	2206      	movs	r2, #6
 80004ee:	601a      	str	r2, [r3, #0]
		}
		left_last_press_tick = HAL_GetTick();
 80004f0:	f000 fb0a 	bl	8000b08 <HAL_GetTick>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a12      	ldr	r2, [pc, #72]	@ (8000540 <HAL_GPIO_EXTI_Callback+0x88>)
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	e008      	b.n	800050e <HAL_GPIO_EXTI_Callback+0x56>
		// for deactivate left button if it's active
		} else if (GPIO_Pin == B2_Pin) {
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	2b10      	cmp	r3, #16
 8000500:	d105      	bne.n	800050e <HAL_GPIO_EXTI_Callback+0x56>
			left_on = 0;
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <HAL_GPIO_EXTI_Callback+0x84>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
			left_toggles = 0;
 8000508:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <HAL_GPIO_EXTI_Callback+0x8c>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	    }

	//turn right button settings
	if (GPIO_Pin == B2_Pin) {
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	2b10      	cmp	r3, #16
 8000512:	d106      	bne.n	8000522 <HAL_GPIO_EXTI_Callback+0x6a>
		right_on = 1 ;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <HAL_GPIO_EXTI_Callback+0x90>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
		right_toggles = 6; // Blink 3 times
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <HAL_GPIO_EXTI_Callback+0x94>)
 800051c:	2206      	movs	r2, #6
 800051e:	601a      	str	r2, [r3, #0]
		} else if (GPIO_Pin == B1_Pin) {
			right_on = 0;
			right_toggles = 0;
	}
}
 8000520:	e008      	b.n	8000534 <HAL_GPIO_EXTI_Callback+0x7c>
		} else if (GPIO_Pin == B1_Pin) {
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	2b02      	cmp	r3, #2
 8000526:	d105      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x7c>
			right_on = 0;
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <HAL_GPIO_EXTI_Callback+0x90>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
			right_toggles = 0;
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <HAL_GPIO_EXTI_Callback+0x94>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000b8 	.word	0x200000b8
 8000540:	200000c0 	.word	0x200000c0
 8000544:	200000b0 	.word	0x200000b0
 8000548:	200000bc 	.word	0x200000bc
 800054c:	200000b4 	.word	0x200000b4

08000550 <turn_signal_left>:

void turn_signal_left(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	static uint32_t turn_toggle_tick = 0;
	if (turn_toggle_tick < HAL_GetTick()) {
 8000554:	f000 fad8 	bl	8000b08 <HAL_GetTick>
 8000558:	4602      	mov	r2, r0
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <turn_signal_left+0x50>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	429a      	cmp	r2, r3
 8000560:	d91b      	bls.n	800059a <turn_signal_left+0x4a>
		if (left_toggles > 0) {
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <turn_signal_left+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d011      	beq.n	800058e <turn_signal_left+0x3e>
			turn_toggle_tick = HAL_GetTick() + 1000; //time of blinking
 800056a:	f000 facd 	bl	8000b08 <HAL_GetTick>
 800056e:	4603      	mov	r3, r0
 8000570:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000574:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <turn_signal_left+0x50>)
 8000576:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LL_GPIO_Port, LL_Pin);
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057e:	f000 fda3 	bl	80010c8 <HAL_GPIO_TogglePin>
			left_toggles--;
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <turn_signal_left+0x54>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <turn_signal_left+0x54>)
 800058a:	6013      	str	r3, [r2, #0]
		} else {
			HAL_GPIO_WritePin(LL_GPIO_Port, LL_Pin, 1);
		}

	}
}
 800058c:	e005      	b.n	800059a <turn_signal_left+0x4a>
			HAL_GPIO_WritePin(LL_GPIO_Port, LL_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000596:	f000 fd7f 	bl	8001098 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000c4 	.word	0x200000c4
 80005a4:	200000b0 	.word	0x200000b0

080005a8 <turn_signal_right>:

void turn_signal_right(void)
	{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
		static uint32_t turn_toggle_tick = 0;
		if (turn_toggle_tick < HAL_GetTick()) {
 80005ac:	f000 faac 	bl	8000b08 <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <turn_signal_right+0x50>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d91b      	bls.n	80005f2 <turn_signal_right+0x4a>
			if (right_toggles > 0) {
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <turn_signal_right+0x54>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d011      	beq.n	80005e6 <turn_signal_right+0x3e>
				turn_toggle_tick = HAL_GetTick() + 1000; //time of blinking
 80005c2:	f000 faa1 	bl	8000b08 <HAL_GetTick>
 80005c6:	4603      	mov	r3, r0
 80005c8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80005cc:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <turn_signal_right+0x50>)
 80005ce:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LR_GPIO_Port, LR_Pin);
 80005d0:	2120      	movs	r1, #32
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d6:	f000 fd77 	bl	80010c8 <HAL_GPIO_TogglePin>
				right_toggles--;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <turn_signal_right+0x54>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <turn_signal_right+0x54>)
 80005e2:	6013      	str	r3, [r2, #0]
			} else {
				HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, 1);
			}

		}
}
 80005e4:	e005      	b.n	80005f2 <turn_signal_right+0x4a>
				HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2120      	movs	r1, #32
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ee:	f000 fd53 	bl	8001098 <HAL_GPIO_WritePin>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000c8 	.word	0x200000c8
 80005fc:	200000b4 	.word	0x200000b4

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fa17 	bl	8000a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f852 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8c6 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f894 	bl	800073c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (left_on == 1){
 8000614:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <main+0x8c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d11b      	bne.n	8000654 <main+0x54>
		  HAL_UART_Transmit(&huart2,"Left Turn Signal On\r\n", 21, 50);
 800061c:	2332      	movs	r3, #50	@ 0x32
 800061e:	2215      	movs	r2, #21
 8000620:	491b      	ldr	r1, [pc, #108]	@ (8000690 <main+0x90>)
 8000622:	481c      	ldr	r0, [pc, #112]	@ (8000694 <main+0x94>)
 8000624:	f002 f8f0 	bl	8002808 <HAL_UART_Transmit>
	      turn_signal_left();
 8000628:	f7ff ff92 	bl	8000550 <turn_signal_left>
		  if (left_toggles == 0xFFFFFF){
 800062c:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <main+0x98>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000634:	4293      	cmp	r3, r2
 8000636:	d106      	bne.n	8000646 <main+0x46>
			  HAL_UART_Transmit(&huart2,"Blinking infinitely\r\n", 21, 50);
 8000638:	2332      	movs	r3, #50	@ 0x32
 800063a:	2215      	movs	r2, #21
 800063c:	4917      	ldr	r1, [pc, #92]	@ (800069c <main+0x9c>)
 800063e:	4815      	ldr	r0, [pc, #84]	@ (8000694 <main+0x94>)
 8000640:	f002 f8e2 	bl	8002808 <HAL_UART_Transmit>
 8000644:	e00d      	b.n	8000662 <main+0x62>
		  } else{
			  HAL_UART_Transmit(&huart2,"Blinking 3 times\r\n", 17, 50);
 8000646:	2332      	movs	r3, #50	@ 0x32
 8000648:	2211      	movs	r2, #17
 800064a:	4915      	ldr	r1, [pc, #84]	@ (80006a0 <main+0xa0>)
 800064c:	4811      	ldr	r0, [pc, #68]	@ (8000694 <main+0x94>)
 800064e:	f002 f8db 	bl	8002808 <HAL_UART_Transmit>
 8000652:	e006      	b.n	8000662 <main+0x62>
		  }
	   }else if (left_on == 0){
 8000654:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <main+0x8c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <main+0x62>
		  left_toggles = 0;
 800065c:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <main+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
		  }

	  if (right_on == 1){
 8000662:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <main+0xa4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d108      	bne.n	800067c <main+0x7c>
		  HAL_UART_Transmit(&huart2,"Right Turn Signal On\r\n", 22, 50);
 800066a:	2332      	movs	r3, #50	@ 0x32
 800066c:	2216      	movs	r2, #22
 800066e:	490e      	ldr	r1, [pc, #56]	@ (80006a8 <main+0xa8>)
 8000670:	4808      	ldr	r0, [pc, #32]	@ (8000694 <main+0x94>)
 8000672:	f002 f8c9 	bl	8002808 <HAL_UART_Transmit>
		  turn_signal_right();
 8000676:	f7ff ff97 	bl	80005a8 <turn_signal_right>
 800067a:	e7cb      	b.n	8000614 <main+0x14>
	   }else if (right_on == 0){
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <main+0xa4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1c7      	bne.n	8000614 <main+0x14>
     	  right_toggles = 0;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <main+0xac>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
	  if (left_on == 1){
 800068a:	e7c3      	b.n	8000614 <main+0x14>
 800068c:	200000b8 	.word	0x200000b8
 8000690:	08003334 	.word	0x08003334
 8000694:	20000028 	.word	0x20000028
 8000698:	200000b0 	.word	0x200000b0
 800069c:	0800334c 	.word	0x0800334c
 80006a0:	08003364 	.word	0x08003364
 80006a4:	200000bc 	.word	0x200000bc
 80006a8:	08003378 	.word	0x08003378
 80006ac:	200000b4 	.word	0x200000b4

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	@ 0x58
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2244      	movs	r2, #68	@ 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fdff 	bl	80032c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006d6:	f000 fd37 	bl	8001148 <HAL_PWREx_ControlVoltageScaling>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e0:	f000 f8aa 	bl	8000838 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e4:	2310      	movs	r3, #16
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f0:	2360      	movs	r3, #96	@ 0x60
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fd79 	bl	80011f4 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000708:	f000 f896 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f941 	bl	80019ac <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000730:	f000 f882 	bl	8000838 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3758      	adds	r7, #88	@ 0x58
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000780:	f001 fff4 	bl	800276c <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f855 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000028 	.word	0x20000028
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_GPIO_Init+0x98>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000834 <MX_GPIO_Init+0x98>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_GPIO_Init+0x98>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LR_Pin|LL_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	21a0      	movs	r1, #160	@ 0xa0
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f000 fc62 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80007d4:	2312      	movs	r3, #18
 80007d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ea:	f000 faab 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_Pin LL_Pin */
  GPIO_InitStruct.Pin = LR_Pin|LL_Pin;
 80007ee:	23a0      	movs	r3, #160	@ 0xa0
 80007f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000806:	f000 fa9d 	bl	8000d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2007      	movs	r0, #7
 8000810:	f000 fa61 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000814:	2007      	movs	r0, #7
 8000816:	f000 fa7a 	bl	8000d0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200a      	movs	r0, #10
 8000820:	f000 fa59 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000824:	200a      	movs	r0, #10
 8000826:	f000 fa72 	bl	8000d0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <HAL_MspInit+0x44>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084e:	4a0e      	ldr	r2, [pc, #56]	@ (8000888 <HAL_MspInit+0x44>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6613      	str	r3, [r2, #96]	@ 0x60
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x44>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x44>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	6593      	str	r3, [r2, #88]	@ 0x58
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0ac      	sub	sp, #176	@ 0xb0
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2288      	movs	r2, #136	@ 0x88
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 fd08 	bl	80032c2 <memset>
  if(huart->Instance==USART2)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a21      	ldr	r2, [pc, #132]	@ (800093c <HAL_UART_MspInit+0xb0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d13b      	bne.n	8000934 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fa93 	bl	8001df4 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d4:	f7ff ffb0 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <HAL_UART_MspInit+0xb4>)
 80008da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008dc:	4a18      	ldr	r2, [pc, #96]	@ (8000940 <HAL_UART_MspInit+0xb4>)
 80008de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <HAL_UART_MspInit+0xb4>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <HAL_UART_MspInit+0xb4>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f4:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <HAL_UART_MspInit+0xb4>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fc:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <HAL_UART_MspInit+0xb4>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000908:	230c      	movs	r3, #12
 800090a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000920:	2307      	movs	r3, #7
 8000922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000930:	f000 fa08 	bl	8000d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	37b0      	adds	r7, #176	@ 0xb0
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40004400 	.word	0x40004400
 8000940:	40021000 	.word	0x40021000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <NMI_Handler+0x4>

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <MemManage_Handler+0x4>

0800095c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <UsageFault_Handler+0x4>

0800096c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099a:	f000 f8a1 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f000 fba8 	bl	80010fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80009b4:	2010      	movs	r0, #16
 80009b6:	f000 fba1 	bl	80010fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e8:	f7ff ffea 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	@ (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	@ (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a12:	f002 fc5f 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fdf3 	bl	8000600 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	080033e8 	.word	0x080033e8
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	200000d0 	.word	0x200000d0

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>

08000a36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f93d 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 f80e 	bl	8000a68 <HAL_InitTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e001      	b.n	8000a5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a58:	f7ff fef4 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_InitTick+0x6c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d023      	beq.n	8000ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_InitTick+0x70>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <HAL_InitTick+0x6c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f949 	bl	8000d2a <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10f      	bne.n	8000abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d809      	bhi.n	8000ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f913 	bl	8000cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_InitTick+0x74>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e007      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e004      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e001      	b.n	8000ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	200000cc 	.word	0x200000cc

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200000cc 	.word	0x200000cc

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	@ (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	@ (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff29 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff3e 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff31 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa2 	bl	8000c7c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e17f      	b.n	8001054 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8171 	beq.w	800104e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x40>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	f003 0201 	and.w	r2, r3, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d118      	bne.n	8000e24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	6939      	ldr	r1, [r7, #16]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80ac 	beq.w	800104e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8001074 <HAL_GPIO_Init+0x330>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efa:	4a5e      	ldr	r2, [pc, #376]	@ (8001074 <HAL_GPIO_Init+0x330>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f02:	4b5c      	ldr	r3, [pc, #368]	@ (8001074 <HAL_GPIO_Init+0x330>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f38:	d025      	beq.n	8000f86 <HAL_GPIO_Init+0x242>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <HAL_GPIO_Init+0x338>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01f      	beq.n	8000f82 <HAL_GPIO_Init+0x23e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	@ (8001080 <HAL_GPIO_Init+0x33c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_Init+0x23a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001084 <HAL_GPIO_Init+0x340>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x236>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	@ (8001088 <HAL_GPIO_Init+0x344>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x232>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800108c <HAL_GPIO_Init+0x348>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x22e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	@ (8001090 <HAL_GPIO_Init+0x34c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x22a>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e00c      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f6e:	2307      	movs	r3, #7
 8000f70:	e00a      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f72:	2305      	movs	r3, #5
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f86:	2300      	movs	r3, #0
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f98:	4937      	ldr	r1, [pc, #220]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fca:	4a32      	ldr	r2, [pc, #200]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800101e:	4a1d      	ldr	r2, [pc, #116]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <HAL_GPIO_Init+0x350>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	f47f ae78 	bne.w	8000d54 <HAL_GPIO_Init+0x10>
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	48000c00 	.word	0x48000c00
 8001088:	48001000 	.word	0x48001000
 800108c:	48001400 	.word	0x48001400
 8001090:	48001800 	.word	0x48001800
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4013      	ands	r3, r2
 80010e0:	041a      	lsls	r2, r3, #16
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43d9      	mvns	r1, r3
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	400b      	ands	r3, r1
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001106:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f9cc 	bl	80004b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <HAL_PWREx_GetVoltageRange+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40007000 	.word	0x40007000

08001148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001156:	d130      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001158:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001164:	d038      	beq.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800116e:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001174:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001176:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2232      	movs	r2, #50	@ 0x32
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0c9b      	lsrs	r3, r3, #18
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118c:	e002      	b.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3b01      	subs	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a0:	d102      	bne.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f2      	bne.n	800118e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b4:	d110      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e00f      	b.n	80011da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011c6:	d007      	beq.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011d0:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000
 80011ec:	20000000 	.word	0x20000000
 80011f0:	431bde83 	.word	0x431bde83

080011f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e3ca      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001206:	4b97      	ldr	r3, [pc, #604]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001210:	4b94      	ldr	r3, [pc, #592]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 80e4 	beq.w	80013f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <HAL_RCC_OscConfig+0x4a>
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b0c      	cmp	r3, #12
 8001232:	f040 808b 	bne.w	800134c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b01      	cmp	r3, #1
 800123a:	f040 8087 	bne.w	800134c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800123e:	4b89      	ldr	r3, [pc, #548]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_OscConfig+0x62>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e3a2      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1a      	ldr	r2, [r3, #32]
 800125a:	4b82      	ldr	r3, [pc, #520]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <HAL_RCC_OscConfig+0x7c>
 8001266:	4b7f      	ldr	r3, [pc, #508]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800126e:	e005      	b.n	800127c <HAL_RCC_OscConfig+0x88>
 8001270:	4b7c      	ldr	r3, [pc, #496]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800127c:	4293      	cmp	r3, r2
 800127e:	d223      	bcs.n	80012c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fd55 	bl	8001d34 <RCC_SetFlashLatencyFromMSIRange>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e383      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001294:	4b73      	ldr	r3, [pc, #460]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a72      	ldr	r2, [pc, #456]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b70      	ldr	r3, [pc, #448]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	496d      	ldr	r1, [pc, #436]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	4968      	ldr	r1, [pc, #416]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
 80012c6:	e025      	b.n	8001314 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c8:	4b66      	ldr	r3, [pc, #408]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a65      	ldr	r2, [pc, #404]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b63      	ldr	r3, [pc, #396]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4960      	ldr	r1, [pc, #384]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	495b      	ldr	r1, [pc, #364]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fd15 	bl	8001d34 <RCC_SetFlashLatencyFromMSIRange>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e343      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001314:	f000 fc4a 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001318:	4602      	mov	r2, r0
 800131a:	4b52      	ldr	r3, [pc, #328]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	4950      	ldr	r1, [pc, #320]	@ (8001468 <HAL_RCC_OscConfig+0x274>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	4a4e      	ldr	r2, [pc, #312]	@ (800146c <HAL_RCC_OscConfig+0x278>)
 8001332:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001334:	4b4e      	ldr	r3, [pc, #312]	@ (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fb95 	bl	8000a68 <HAL_InitTick>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d052      	beq.n	80013ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	e327      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d032      	beq.n	80013ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001354:	4b43      	ldr	r3, [pc, #268]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a42      	ldr	r2, [pc, #264]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001360:	f7ff fbd2 	bl	8000b08 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001368:	f7ff fbce 	bl	8000b08 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e310      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137a:	4b3a      	ldr	r3, [pc, #232]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001386:	4b37      	ldr	r3, [pc, #220]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a36      	ldr	r2, [pc, #216]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4931      	ldr	r1, [pc, #196]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	492c      	ldr	r1, [pc, #176]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
 80013b8:	e01a      	b.n	80013f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a29      	ldr	r2, [pc, #164]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb9f 	bl	8000b08 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ce:	f7ff fb9b 	bl	8000b08 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e2dd      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x1da>
 80013ec:	e000      	b.n	80013f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d074      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x21a>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	d10e      	bne.n	8001426 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d10b      	bne.n	8001426 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d064      	beq.n	80014e4 <HAL_RCC_OscConfig+0x2f0>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d160      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e2ba      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x24a>
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e026      	b.n	800148c <HAL_RCC_OscConfig+0x298>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001446:	d115      	bne.n	8001474 <HAL_RCC_OscConfig+0x280>
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800144e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a02      	ldr	r2, [pc, #8]	@ (8001464 <HAL_RCC_OscConfig+0x270>)
 800145a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e014      	b.n	800148c <HAL_RCC_OscConfig+0x298>
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	08003390 	.word	0x08003390
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004
 8001474:	4ba0      	ldr	r3, [pc, #640]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a9f      	ldr	r2, [pc, #636]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800147a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b9d      	ldr	r3, [pc, #628]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a9c      	ldr	r2, [pc, #624]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fb38 	bl	8000b08 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fb34 	bl	8000b08 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e276      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ae:	4b92      	ldr	r3, [pc, #584]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x2a8>
 80014ba:	e014      	b.n	80014e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb24 	bl	8000b08 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fb20 	bl	8000b08 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e262      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d6:	4b88      	ldr	r3, [pc, #544]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2d0>
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d060      	beq.n	80015b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_OscConfig+0x310>
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	d119      	bne.n	8001532 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d116      	bne.n	8001532 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001504:	4b7c      	ldr	r3, [pc, #496]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_RCC_OscConfig+0x328>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e23f      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b76      	ldr	r3, [pc, #472]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	061b      	lsls	r3, r3, #24
 800152a:	4973      	ldr	r1, [pc, #460]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001530:	e040      	b.n	80015b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d023      	beq.n	8001582 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153a:	4b6f      	ldr	r3, [pc, #444]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6e      	ldr	r2, [pc, #440]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fadf 	bl	8000b08 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fadb 	bl	8000b08 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e21d      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	4b65      	ldr	r3, [pc, #404]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b62      	ldr	r3, [pc, #392]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	495f      	ldr	r1, [pc, #380]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
 8001580:	e018      	b.n	80015b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a5c      	ldr	r2, [pc, #368]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fabb 	bl	8000b08 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fab7 	bl	8000b08 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1f9      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a8:	4b53      	ldr	r3, [pc, #332]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d03c      	beq.n	800163a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d01c      	beq.n	8001602 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c8:	4b4b      	ldr	r3, [pc, #300]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ce:	4a4a      	ldr	r2, [pc, #296]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fa96 	bl	8000b08 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fa92 	bl	8000b08 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1d4      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f2:	4b41      	ldr	r3, [pc, #260]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ef      	beq.n	80015e0 <HAL_RCC_OscConfig+0x3ec>
 8001600:	e01b      	b.n	800163a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001602:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001608:	4a3b      	ldr	r2, [pc, #236]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fa79 	bl	8000b08 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fa75 	bl	8000b08 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1b7      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162c:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ef      	bne.n	800161a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80a6 	beq.w	8001794 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800164c:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	4a26      	ldr	r2, [pc, #152]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 800165e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001662:	6593      	str	r3, [r2, #88]	@ 0x58
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001670:	2301      	movs	r3, #1
 8001672:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <HAL_RCC_OscConfig+0x508>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d118      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001680:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <HAL_RCC_OscConfig+0x508>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <HAL_RCC_OscConfig+0x508>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168c:	f7ff fa3c 	bl	8000b08 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001694:	f7ff fa38 	bl	8000b08 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e17a      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_RCC_OscConfig+0x508>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d108      	bne.n	80016cc <HAL_RCC_OscConfig+0x4d8>
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ca:	e029      	b.n	8001720 <HAL_RCC_OscConfig+0x52c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d115      	bne.n	8001700 <HAL_RCC_OscConfig+0x50c>
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016da:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e4:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ea:	4a03      	ldr	r2, [pc, #12]	@ (80016f8 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f4:	e014      	b.n	8001720 <HAL_RCC_OscConfig+0x52c>
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40007000 	.word	0x40007000
 8001700:	4b9c      	ldr	r3, [pc, #624]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001706:	4a9b      	ldr	r2, [pc, #620]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001710:	4b98      	ldr	r3, [pc, #608]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001716:	4a97      	ldr	r2, [pc, #604]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d016      	beq.n	8001756 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff f9ee 	bl	8000b08 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff f9ea 	bl	8000b08 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e12a      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001746:	4b8b      	ldr	r3, [pc, #556]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ed      	beq.n	8001730 <HAL_RCC_OscConfig+0x53c>
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff f9d7 	bl	8000b08 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff f9d3 	bl	8000b08 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e113      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001774:	4b7f      	ldr	r3, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ed      	bne.n	800175e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001782:	7ffb      	ldrb	r3, [r7, #31]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b7a      	ldr	r3, [pc, #488]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a79      	ldr	r2, [pc, #484]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 800178e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80fe 	beq.w	800199a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	f040 80d0 	bne.w	8001948 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017a8:	4b72      	ldr	r3, [pc, #456]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0203 	and.w	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d130      	bne.n	800181e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	3b01      	subs	r3, #1
 80017c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d127      	bne.n	800181e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d11f      	bne.n	800181e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017e8:	2a07      	cmp	r2, #7
 80017ea:	bf14      	ite	ne
 80017ec:	2201      	movne	r2, #1
 80017ee:	2200      	moveq	r2, #0
 80017f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d113      	bne.n	800181e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	3b01      	subs	r3, #1
 8001804:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d109      	bne.n	800181e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3b01      	subs	r3, #1
 8001818:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d06e      	beq.n	80018fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b0c      	cmp	r3, #12
 8001822:	d069      	beq.n	80018f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001824:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001830:	4b50      	ldr	r3, [pc, #320]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0ad      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001840:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a4b      	ldr	r2, [pc, #300]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800184c:	f7ff f95c 	bl	8000b08 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f958 	bl	8000b08 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e09a      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001866:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001872:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4b40      	ldr	r3, [pc, #256]	@ (8001978 <HAL_RCC_OscConfig+0x784>)
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001882:	3a01      	subs	r2, #1
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	4311      	orrs	r1, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800188c:	0212      	lsls	r2, r2, #8
 800188e:	4311      	orrs	r1, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001894:	0852      	lsrs	r2, r2, #1
 8001896:	3a01      	subs	r2, #1
 8001898:	0552      	lsls	r2, r2, #21
 800189a:	4311      	orrs	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018a0:	0852      	lsrs	r2, r2, #1
 80018a2:	3a01      	subs	r2, #1
 80018a4:	0652      	lsls	r2, r2, #25
 80018a6:	4311      	orrs	r1, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018ac:	0912      	lsrs	r2, r2, #4
 80018ae:	0452      	lsls	r2, r2, #17
 80018b0:	430a      	orrs	r2, r1
 80018b2:	4930      	ldr	r1, [pc, #192]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 80018be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d0:	f7ff f91a 	bl	8000b08 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f916 	bl	8000b08 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e058      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f6:	e050      	b.n	800199a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e04f      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d148      	bne.n	800199a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001920:	f7ff f8f2 	bl	8000b08 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f8ee 	bl	8000b08 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e030      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x734>
 8001946:	e028      	b.n	800199a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d023      	beq.n	8001996 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001954:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f8d5 	bl	8000b08 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	e00c      	b.n	800197c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff f8d1 	bl	8000b08 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d905      	bls.n	800197c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e013      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
 8001974:	40021000 	.word	0x40021000
 8001978:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_OscConfig+0x7b0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ec      	bne.n	8001962 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_RCC_OscConfig+0x7b0>)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4905      	ldr	r1, [pc, #20]	@ (80019a4 <HAL_RCC_OscConfig+0x7b0>)
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_RCC_OscConfig+0x7b4>)
 8001990:	4013      	ands	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
 8001994:	e001      	b.n	800199a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	feeefffc 	.word	0xfeeefffc

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0e7      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b75      	ldr	r3, [pc, #468]	@ (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d910      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b72      	ldr	r3, [pc, #456]	@ (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 0207 	bic.w	r2, r3, #7
 80019d6:	4970      	ldr	r1, [pc, #448]	@ (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b6e      	ldr	r3, [pc, #440]	@ (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0cf      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b66      	ldr	r3, [pc, #408]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d908      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b63      	ldr	r3, [pc, #396]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4960      	ldr	r1, [pc, #384]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d04c      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b5a      	ldr	r3, [pc, #360]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d121      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0a6      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4a:	4b54      	ldr	r3, [pc, #336]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e09a      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a62:	4b4e      	ldr	r3, [pc, #312]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e08e      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a72:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e086      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b46      	ldr	r3, [pc, #280]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4943      	ldr	r1, [pc, #268]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a94:	f7ff f838 	bl	8000b08 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff f834 	bl	8000b08 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e06e      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d208      	bcs.n	8001af2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	492b      	ldr	r1, [pc, #172]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af2:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d210      	bcs.n	8001b22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b00:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 0207 	bic.w	r2, r3, #7
 8001b08:	4923      	ldr	r1, [pc, #140]	@ (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e036      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	4918      	ldr	r1, [pc, #96]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4910      	ldr	r1, [pc, #64]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b60:	f000 f824 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	490b      	ldr	r1, [pc, #44]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b80:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1fc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe ff6f 	bl	8000a68 <HAL_InitTick>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08003390 	.word	0x08003390
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bba:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d121      	bne.n	8001c1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d11e      	bne.n	8001c1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001be0:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bec:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e005      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c08:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d102      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c24:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	e004      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c30:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d134      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d003      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0xac>
 8001c50:	e005      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001c54:	617b      	str	r3, [r7, #20]
      break;
 8001c56:	e005      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c5a:	617b      	str	r3, [r7, #20]
      break;
 8001c5c:	e002      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	617b      	str	r3, [r7, #20]
      break;
 8001c62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	3301      	adds	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	fb03 f202 	mul.w	r2, r3, r2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	0e5b      	lsrs	r3, r3, #25
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	3301      	adds	r3, #1
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	080033a8 	.word	0x080033a8
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	007a1200 	.word	0x007a1200

08001cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000000 	.word	0x20000000

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4904      	ldr	r1, [pc, #16]	@ (8001d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	080033a0 	.word	0x080033a0

08001d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d0c:	f7ff ffda 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0adb      	lsrs	r3, r3, #11
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4904      	ldr	r1, [pc, #16]	@ (8001d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	080033a0 	.word	0x080033a0

08001d34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d40:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d4c:	f7ff f9ee 	bl	800112c <HAL_PWREx_GetVoltageRange>
 8001d50:	6178      	str	r0, [r7, #20]
 8001d52:	e014      	b.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d58:	4a24      	ldr	r2, [pc, #144]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d60:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d6c:	f7ff f9de 	bl	800112c <HAL_PWREx_GetVoltageRange>
 8001d70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d76:	4a1d      	ldr	r2, [pc, #116]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d84:	d10b      	bne.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b80      	cmp	r3, #128	@ 0x80
 8001d8a:	d919      	bls.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d90:	d902      	bls.n	8001d98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d92:	2302      	movs	r3, #2
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e013      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d98:	2301      	movs	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	e010      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b80      	cmp	r3, #128	@ 0x80
 8001da2:	d902      	bls.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da4:	2303      	movs	r3, #3
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e00a      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b80      	cmp	r3, #128	@ 0x80
 8001dae:	d102      	bne.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db0:	2302      	movs	r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e004      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b70      	cmp	r3, #112	@ 0x70
 8001dba:	d101      	bne.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 0207 	bic.w	r2, r3, #7
 8001dc8:	4909      	ldr	r1, [pc, #36]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40022000 	.word	0x40022000

08001df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e00:	2300      	movs	r3, #0
 8001e02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d041      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e18:	d02a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e1a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e1e:	d824      	bhi.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e24:	d008      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e2a:	d81e      	bhi.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e34:	d010      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e36:	e018      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e38:	4b86      	ldr	r3, [pc, #536]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4a85      	ldr	r2, [pc, #532]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e44:	e015      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fabb 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8001e52:	4603      	mov	r3, r0
 8001e54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e56:	e00c      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3320      	adds	r3, #32
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fba6 	bl	80025b0 <RCCEx_PLLSAI2_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e68:	e003      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e6e:	e000      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e72:	7cfb      	ldrb	r3, [r7, #19]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10b      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e78:	4b76      	ldr	r3, [pc, #472]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e86:	4973      	ldr	r1, [pc, #460]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e8e:	e001      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d041      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ea4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ea8:	d02a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001eaa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001eae:	d824      	bhi.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001eb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eb4:	d008      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eba:	d81e      	bhi.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ec6:	e018      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ec8:	4b62      	ldr	r3, [pc, #392]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a61      	ldr	r2, [pc, #388]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed4:	e015      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fa73 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee6:	e00c      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3320      	adds	r3, #32
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb5e 	bl	80025b0 <RCCEx_PLLSAI2_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef8:	e003      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	74fb      	strb	r3, [r7, #19]
      break;
 8001efe:	e000      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10b      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f08:	4b52      	ldr	r3, [pc, #328]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f16:	494f      	ldr	r1, [pc, #316]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f1e:	e001      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a0 	beq.w	8002072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f36:	4b47      	ldr	r3, [pc, #284]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f46:	2300      	movs	r3, #0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00d      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b41      	ldr	r3, [pc, #260]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	4a40      	ldr	r2, [pc, #256]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f58:	4b3e      	ldr	r3, [pc, #248]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f64:	2301      	movs	r3, #1
 8001f66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f68:	4b3b      	ldr	r3, [pc, #236]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fdc8 	bl	8000b08 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f7a:	e009      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7c:	f7fe fdc4 	bl	8000b08 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d902      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f8e:	e005      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f90:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ef      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d15c      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01f      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d019      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fc0:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fcc:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	4a20      	ldr	r2, [pc, #128]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fec:	4a19      	ldr	r2, [pc, #100]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fd83 	bl	8000b08 <HAL_GetTick>
 8002002:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002004:	e00b      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7fe fd7f 	bl	8000b08 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d902      	bls.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	74fb      	strb	r3, [r7, #19]
            break;
 800201c:	e006      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ec      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002042:	4904      	ldr	r1, [pc, #16]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800204a:	e009      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
 8002050:	e006      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002060:	7c7b      	ldrb	r3, [r7, #17]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b9e      	ldr	r3, [pc, #632]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	4a9d      	ldr	r2, [pc, #628]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002070:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800207e:	4b98      	ldr	r3, [pc, #608]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002084:	f023 0203 	bic.w	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208c:	4994      	ldr	r1, [pc, #592]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a0:	4b8f      	ldr	r3, [pc, #572]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	f023 020c 	bic.w	r2, r3, #12
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ae:	498c      	ldr	r1, [pc, #560]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c2:	4b87      	ldr	r3, [pc, #540]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	4983      	ldr	r1, [pc, #524]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020e4:	4b7e      	ldr	r3, [pc, #504]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	497b      	ldr	r1, [pc, #492]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002106:	4b76      	ldr	r3, [pc, #472]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002114:	4972      	ldr	r1, [pc, #456]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002128:	4b6d      	ldr	r3, [pc, #436]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002136:	496a      	ldr	r1, [pc, #424]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800214a:	4b65      	ldr	r3, [pc, #404]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002150:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	4961      	ldr	r1, [pc, #388]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800216c:	4b5c      	ldr	r3, [pc, #368]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	4959      	ldr	r1, [pc, #356]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218e:	4b54      	ldr	r3, [pc, #336]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800219c:	4950      	ldr	r1, [pc, #320]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021b0:	4b4b      	ldr	r3, [pc, #300]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021be:	4948      	ldr	r1, [pc, #288]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d2:	4b43      	ldr	r3, [pc, #268]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e0:	493f      	ldr	r1, [pc, #252]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d028      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021f4:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002202:	4937      	ldr	r1, [pc, #220]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002212:	d106      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a31      	ldr	r2, [pc, #196]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
 8002220:	e011      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002226:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800222a:	d10c      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8c8 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d028      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002252:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002260:	491f      	ldr	r1, [pc, #124]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002270:	d106      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002272:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4a1a      	ldr	r2, [pc, #104]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227c:	60d3      	str	r3, [r2, #12]
 800227e:	e011      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002288:	d10c      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	2101      	movs	r1, #1
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f899 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8002296:	4603      	mov	r3, r0
 8002298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d02b      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ce:	d109      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a02      	ldr	r2, [pc, #8]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022da:	60d3      	str	r3, [r2, #12]
 80022dc:	e014      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f867 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02f      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002314:	4b2b      	ldr	r3, [pc, #172]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002322:	4928      	ldr	r1, [pc, #160]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800232e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002332:	d10d      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f844 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d014      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	74bb      	strb	r3, [r7, #18]
 800234e:	e011      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002358:	d10c      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3320      	adds	r3, #32
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f925 	bl	80025b0 <RCCEx_PLLSAI2_Config>
 8002366:	4603      	mov	r3, r0
 8002368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002380:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002386:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800238e:	490d      	ldr	r1, [pc, #52]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023a2:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023b2:	4904      	ldr	r1, [pc, #16]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023d6:	4b75      	ldr	r3, [pc, #468]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d018      	beq.n	8002414 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023e2:	4b72      	ldr	r3, [pc, #456]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0203 	and.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10d      	bne.n	800240e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
       ||
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023fa:	4b6c      	ldr	r3, [pc, #432]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
       ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d047      	beq.n	800249e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	e044      	b.n	800249e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d018      	beq.n	800244e <RCCEx_PLLSAI1_Config+0x86>
 800241c:	2b03      	cmp	r3, #3
 800241e:	d825      	bhi.n	800246c <RCCEx_PLLSAI1_Config+0xa4>
 8002420:	2b01      	cmp	r3, #1
 8002422:	d002      	beq.n	800242a <RCCEx_PLLSAI1_Config+0x62>
 8002424:	2b02      	cmp	r3, #2
 8002426:	d009      	beq.n	800243c <RCCEx_PLLSAI1_Config+0x74>
 8002428:	e020      	b.n	800246c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800242a:	4b60      	ldr	r3, [pc, #384]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d11d      	bne.n	8002472 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243a:	e01a      	b.n	8002472 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800243c:	4b5b      	ldr	r3, [pc, #364]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244c:	e013      	b.n	8002476 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800244e:	4b57      	ldr	r3, [pc, #348]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800245a:	4b54      	ldr	r3, [pc, #336]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800246a:	e006      	b.n	800247a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e004      	b.n	800247c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002472:	bf00      	nop
 8002474:	e002      	b.n	800247c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800247a:	bf00      	nop
    }

    if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002482:	4b4a      	ldr	r3, [pc, #296]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	430b      	orrs	r3, r1
 8002498:	4944      	ldr	r1, [pc, #272]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d17d      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024a4:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a40      	ldr	r2, [pc, #256]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80024aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b0:	f7fe fb2a 	bl	8000b08 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024b6:	e009      	b.n	80024cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024b8:	f7fe fb26 	bl	8000b08 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d902      	bls.n	80024cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ca:	e005      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024cc:	4b37      	ldr	r3, [pc, #220]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ef      	bne.n	80024b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d160      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e4:	4b31      	ldr	r3, [pc, #196]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6892      	ldr	r2, [r2, #8]
 80024f4:	0211      	lsls	r1, r2, #8
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	0912      	lsrs	r2, r2, #4
 80024fc:	0452      	lsls	r2, r2, #17
 80024fe:	430a      	orrs	r2, r1
 8002500:	492a      	ldr	r1, [pc, #168]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	610b      	str	r3, [r1, #16]
 8002506:	e027      	b.n	8002558 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d112      	bne.n	8002534 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002516:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6892      	ldr	r2, [r2, #8]
 800251e:	0211      	lsls	r1, r2, #8
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6912      	ldr	r2, [r2, #16]
 8002524:	0852      	lsrs	r2, r2, #1
 8002526:	3a01      	subs	r2, #1
 8002528:	0552      	lsls	r2, r2, #21
 800252a:	430a      	orrs	r2, r1
 800252c:	491f      	ldr	r1, [pc, #124]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	610b      	str	r3, [r1, #16]
 8002532:	e011      	b.n	8002558 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002534:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800253c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6892      	ldr	r2, [r2, #8]
 8002544:	0211      	lsls	r1, r2, #8
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6952      	ldr	r2, [r2, #20]
 800254a:	0852      	lsrs	r2, r2, #1
 800254c:	3a01      	subs	r2, #1
 800254e:	0652      	lsls	r2, r2, #25
 8002550:	430a      	orrs	r2, r1
 8002552:	4916      	ldr	r1, [pc, #88]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a13      	ldr	r2, [pc, #76]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fad0 	bl	8000b08 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800256a:	e009      	b.n	8002580 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800256c:	f7fe facc 	bl	8000b08 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d902      	bls.n	8002580 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	73fb      	strb	r3, [r7, #15]
          break;
 800257e:	e005      	b.n	800258c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002580:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4904      	ldr	r1, [pc, #16]	@ (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025be:	4b6a      	ldr	r3, [pc, #424]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d018      	beq.n	80025fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025ca:	4b67      	ldr	r3, [pc, #412]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0203 	and.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d10d      	bne.n	80025f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
       ||
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025e2:	4b61      	ldr	r3, [pc, #388]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
       ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d047      	beq.n	8002686 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e044      	b.n	8002686 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d018      	beq.n	8002636 <RCCEx_PLLSAI2_Config+0x86>
 8002604:	2b03      	cmp	r3, #3
 8002606:	d825      	bhi.n	8002654 <RCCEx_PLLSAI2_Config+0xa4>
 8002608:	2b01      	cmp	r3, #1
 800260a:	d002      	beq.n	8002612 <RCCEx_PLLSAI2_Config+0x62>
 800260c:	2b02      	cmp	r3, #2
 800260e:	d009      	beq.n	8002624 <RCCEx_PLLSAI2_Config+0x74>
 8002610:	e020      	b.n	8002654 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002612:	4b55      	ldr	r3, [pc, #340]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11d      	bne.n	800265a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e01a      	b.n	800265a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002624:	4b50      	ldr	r3, [pc, #320]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e013      	b.n	800265e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002636:	4b4c      	ldr	r3, [pc, #304]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002642:	4b49      	ldr	r3, [pc, #292]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002652:	e006      	b.n	8002662 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e004      	b.n	8002664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002662:	bf00      	nop
    }

    if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800266a:	4b3f      	ldr	r3, [pc, #252]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	430b      	orrs	r3, r1
 8002680:	4939      	ldr	r1, [pc, #228]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	4313      	orrs	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d167      	bne.n	800275c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800268c:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a35      	ldr	r2, [pc, #212]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002692:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fa36 	bl	8000b08 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800269e:	e009      	b.n	80026b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026a0:	f7fe fa32 	bl	8000b08 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	73fb      	strb	r3, [r7, #15]
        break;
 80026b2:	e005      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ef      	bne.n	80026a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d14a      	bne.n	800275c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026cc:	4b26      	ldr	r3, [pc, #152]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	0211      	lsls	r1, r2, #8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	0912      	lsrs	r2, r2, #4
 80026e4:	0452      	lsls	r2, r2, #17
 80026e6:	430a      	orrs	r2, r1
 80026e8:	491f      	ldr	r1, [pc, #124]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	614b      	str	r3, [r1, #20]
 80026ee:	e011      	b.n	8002714 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6892      	ldr	r2, [r2, #8]
 8002700:	0211      	lsls	r1, r2, #8
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6912      	ldr	r2, [r2, #16]
 8002706:	0852      	lsrs	r2, r2, #1
 8002708:	3a01      	subs	r2, #1
 800270a:	0652      	lsls	r2, r2, #25
 800270c:	430a      	orrs	r2, r1
 800270e:	4916      	ldr	r1, [pc, #88]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	4313      	orrs	r3, r2
 8002712:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002714:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a13      	ldr	r2, [pc, #76]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe f9f2 	bl	8000b08 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002726:	e009      	b.n	800273c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002728:	f7fe f9ee 	bl	8000b08 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	73fb      	strb	r3, [r7, #15]
          break;
 800273a:	e005      	b.n	8002748 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ef      	beq.n	8002728 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	4904      	ldr	r1, [pc, #16]	@ (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e040      	b.n	8002800 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe f87c 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	@ 0x24
 8002798:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fb6a 	bl	8002e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f8af 	bl	800291c <UART_SetConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e01b      	b.n	8002800 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fbe9 	bl	8002fd0 <UART_CheckIdleState>
 80027fe:	4603      	mov	r3, r0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800281c:	2b20      	cmp	r3, #32
 800281e:	d177      	bne.n	8002910 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_UART_Transmit+0x24>
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e070      	b.n	8002912 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2221      	movs	r2, #33	@ 0x21
 800283c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800283e:	f7fe f963 	bl	8000b08 <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800285c:	d108      	bne.n	8002870 <HAL_UART_Transmit+0x68>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	e003      	b.n	8002878 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002878:	e02f      	b.n	80028da <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2200      	movs	r2, #0
 8002882:	2180      	movs	r1, #128	@ 0x80
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fc4b 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e03b      	b.n	8002912 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ac:	b292      	uxth	r2, r2
 80028ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	3302      	adds	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	e007      	b.n	80028c8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1c9      	bne.n	800287a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2140      	movs	r1, #64	@ 0x40
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fc15 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e005      	b.n	8002912 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e000      	b.n	8002912 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002920:	b08a      	sub	sp, #40	@ 0x28
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	431a      	orrs	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	4313      	orrs	r3, r2
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4ba4      	ldr	r3, [pc, #656]	@ (8002bdc <UART_SetConfig+0x2c0>)
 800294c:	4013      	ands	r3, r2
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002954:	430b      	orrs	r3, r1
 8002956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a99      	ldr	r2, [pc, #612]	@ (8002be0 <UART_SetConfig+0x2c4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002984:	4313      	orrs	r3, r2
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a90      	ldr	r2, [pc, #576]	@ (8002be4 <UART_SetConfig+0x2c8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d126      	bne.n	80029f4 <UART_SetConfig+0xd8>
 80029a6:	4b90      	ldr	r3, [pc, #576]	@ (8002be8 <UART_SetConfig+0x2cc>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d81b      	bhi.n	80029ec <UART_SetConfig+0xd0>
 80029b4:	a201      	add	r2, pc, #4	@ (adr r2, 80029bc <UART_SetConfig+0xa0>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029dd 	.word	0x080029dd
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029e5 	.word	0x080029e5
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d2:	e116      	b.n	8002c02 <UART_SetConfig+0x2e6>
 80029d4:	2302      	movs	r3, #2
 80029d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029da:	e112      	b.n	8002c02 <UART_SetConfig+0x2e6>
 80029dc:	2304      	movs	r3, #4
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e2:	e10e      	b.n	8002c02 <UART_SetConfig+0x2e6>
 80029e4:	2308      	movs	r3, #8
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ea:	e10a      	b.n	8002c02 <UART_SetConfig+0x2e6>
 80029ec:	2310      	movs	r3, #16
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f2:	e106      	b.n	8002c02 <UART_SetConfig+0x2e6>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a7c      	ldr	r2, [pc, #496]	@ (8002bec <UART_SetConfig+0x2d0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d138      	bne.n	8002a70 <UART_SetConfig+0x154>
 80029fe:	4b7a      	ldr	r3, [pc, #488]	@ (8002be8 <UART_SetConfig+0x2cc>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	d82d      	bhi.n	8002a68 <UART_SetConfig+0x14c>
 8002a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <UART_SetConfig+0xf8>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a49 	.word	0x08002a49
 8002a18:	08002a69 	.word	0x08002a69
 8002a1c:	08002a69 	.word	0x08002a69
 8002a20:	08002a69 	.word	0x08002a69
 8002a24:	08002a59 	.word	0x08002a59
 8002a28:	08002a69 	.word	0x08002a69
 8002a2c:	08002a69 	.word	0x08002a69
 8002a30:	08002a69 	.word	0x08002a69
 8002a34:	08002a51 	.word	0x08002a51
 8002a38:	08002a69 	.word	0x08002a69
 8002a3c:	08002a69 	.word	0x08002a69
 8002a40:	08002a69 	.word	0x08002a69
 8002a44:	08002a61 	.word	0x08002a61
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4e:	e0d8      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002a50:	2302      	movs	r3, #2
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a56:	e0d4      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a5e:	e0d0      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002a60:	2308      	movs	r3, #8
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a66:	e0cc      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002a68:	2310      	movs	r3, #16
 8002a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a6e:	e0c8      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf0 <UART_SetConfig+0x2d4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d125      	bne.n	8002ac6 <UART_SetConfig+0x1aa>
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002be8 <UART_SetConfig+0x2cc>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a84:	2b30      	cmp	r3, #48	@ 0x30
 8002a86:	d016      	beq.n	8002ab6 <UART_SetConfig+0x19a>
 8002a88:	2b30      	cmp	r3, #48	@ 0x30
 8002a8a:	d818      	bhi.n	8002abe <UART_SetConfig+0x1a2>
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d00a      	beq.n	8002aa6 <UART_SetConfig+0x18a>
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d814      	bhi.n	8002abe <UART_SetConfig+0x1a2>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <UART_SetConfig+0x182>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d008      	beq.n	8002aae <UART_SetConfig+0x192>
 8002a9c:	e00f      	b.n	8002abe <UART_SetConfig+0x1a2>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa4:	e0ad      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aac:	e0a9      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab4:	e0a5      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abc:	e0a1      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002abe:	2310      	movs	r3, #16
 8002ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac4:	e09d      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf4 <UART_SetConfig+0x2d8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d125      	bne.n	8002b1c <UART_SetConfig+0x200>
 8002ad0:	4b45      	ldr	r3, [pc, #276]	@ (8002be8 <UART_SetConfig+0x2cc>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8002adc:	d016      	beq.n	8002b0c <UART_SetConfig+0x1f0>
 8002ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ae0:	d818      	bhi.n	8002b14 <UART_SetConfig+0x1f8>
 8002ae2:	2b80      	cmp	r3, #128	@ 0x80
 8002ae4:	d00a      	beq.n	8002afc <UART_SetConfig+0x1e0>
 8002ae6:	2b80      	cmp	r3, #128	@ 0x80
 8002ae8:	d814      	bhi.n	8002b14 <UART_SetConfig+0x1f8>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <UART_SetConfig+0x1d8>
 8002aee:	2b40      	cmp	r3, #64	@ 0x40
 8002af0:	d008      	beq.n	8002b04 <UART_SetConfig+0x1e8>
 8002af2:	e00f      	b.n	8002b14 <UART_SetConfig+0x1f8>
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afa:	e082      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002afc:	2302      	movs	r3, #2
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b02:	e07e      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b04:	2304      	movs	r3, #4
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0a:	e07a      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b12:	e076      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b14:	2310      	movs	r3, #16
 8002b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1a:	e072      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a35      	ldr	r2, [pc, #212]	@ (8002bf8 <UART_SetConfig+0x2dc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d12a      	bne.n	8002b7c <UART_SetConfig+0x260>
 8002b26:	4b30      	ldr	r3, [pc, #192]	@ (8002be8 <UART_SetConfig+0x2cc>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b34:	d01a      	beq.n	8002b6c <UART_SetConfig+0x250>
 8002b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b3a:	d81b      	bhi.n	8002b74 <UART_SetConfig+0x258>
 8002b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b40:	d00c      	beq.n	8002b5c <UART_SetConfig+0x240>
 8002b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b46:	d815      	bhi.n	8002b74 <UART_SetConfig+0x258>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <UART_SetConfig+0x238>
 8002b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b50:	d008      	beq.n	8002b64 <UART_SetConfig+0x248>
 8002b52:	e00f      	b.n	8002b74 <UART_SetConfig+0x258>
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b5a:	e052      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b62:	e04e      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b64:	2304      	movs	r3, #4
 8002b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b6a:	e04a      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b72:	e046      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b74:	2310      	movs	r3, #16
 8002b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b7a:	e042      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a17      	ldr	r2, [pc, #92]	@ (8002be0 <UART_SetConfig+0x2c4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d13a      	bne.n	8002bfc <UART_SetConfig+0x2e0>
 8002b86:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <UART_SetConfig+0x2cc>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b94:	d01a      	beq.n	8002bcc <UART_SetConfig+0x2b0>
 8002b96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b9a:	d81b      	bhi.n	8002bd4 <UART_SetConfig+0x2b8>
 8002b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ba0:	d00c      	beq.n	8002bbc <UART_SetConfig+0x2a0>
 8002ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ba6:	d815      	bhi.n	8002bd4 <UART_SetConfig+0x2b8>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <UART_SetConfig+0x298>
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb0:	d008      	beq.n	8002bc4 <UART_SetConfig+0x2a8>
 8002bb2:	e00f      	b.n	8002bd4 <UART_SetConfig+0x2b8>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bba:	e022      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bc2:	e01e      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bca:	e01a      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002bcc:	2308      	movs	r3, #8
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd2:	e016      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bda:	e012      	b.n	8002c02 <UART_SetConfig+0x2e6>
 8002bdc:	efff69f3 	.word	0xefff69f3
 8002be0:	40008000 	.word	0x40008000
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40004400 	.word	0x40004400
 8002bf0:	40004800 	.word	0x40004800
 8002bf4:	40004c00 	.word	0x40004c00
 8002bf8:	40005000 	.word	0x40005000
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a9f      	ldr	r2, [pc, #636]	@ (8002e84 <UART_SetConfig+0x568>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d17a      	bne.n	8002d02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d824      	bhi.n	8002c5e <UART_SetConfig+0x342>
 8002c14:	a201      	add	r2, pc, #4	@ (adr r2, 8002c1c <UART_SetConfig+0x300>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c41 	.word	0x08002c41
 8002c20:	08002c5f 	.word	0x08002c5f
 8002c24:	08002c49 	.word	0x08002c49
 8002c28:	08002c5f 	.word	0x08002c5f
 8002c2c:	08002c4f 	.word	0x08002c4f
 8002c30:	08002c5f 	.word	0x08002c5f
 8002c34:	08002c5f 	.word	0x08002c5f
 8002c38:	08002c5f 	.word	0x08002c5f
 8002c3c:	08002c57 	.word	0x08002c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c40:	f7ff f84c 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002c44:	61f8      	str	r0, [r7, #28]
        break;
 8002c46:	e010      	b.n	8002c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c48:	4b8f      	ldr	r3, [pc, #572]	@ (8002e88 <UART_SetConfig+0x56c>)
 8002c4a:	61fb      	str	r3, [r7, #28]
        break;
 8002c4c:	e00d      	b.n	8002c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c4e:	f7fe ffad 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8002c52:	61f8      	str	r0, [r7, #28]
        break;
 8002c54:	e009      	b.n	8002c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c5a:	61fb      	str	r3, [r7, #28]
        break;
 8002c5c:	e005      	b.n	8002c6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80fb 	beq.w	8002e68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d305      	bcc.n	8002c8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d903      	bls.n	8002c96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c94:	e0e8      	b.n	8002e68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	461c      	mov	r4, r3
 8002c9c:	4615      	mov	r5, r2
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	022b      	lsls	r3, r5, #8
 8002ca8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cac:	0222      	lsls	r2, r4, #8
 8002cae:	68f9      	ldr	r1, [r7, #12]
 8002cb0:	6849      	ldr	r1, [r1, #4]
 8002cb2:	0849      	lsrs	r1, r1, #1
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	4688      	mov	r8, r1
 8002cb8:	4681      	mov	r9, r0
 8002cba:	eb12 0a08 	adds.w	sl, r2, r8
 8002cbe:	eb43 0b09 	adc.w	fp, r3, r9
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd0:	4650      	mov	r0, sl
 8002cd2:	4659      	mov	r1, fp
 8002cd4:	f7fd fa78 	bl	80001c8 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ce6:	d308      	bcc.n	8002cfa <UART_SetConfig+0x3de>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cee:	d204      	bcs.n	8002cfa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	e0b6      	b.n	8002e68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d00:	e0b2      	b.n	8002e68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d0a:	d15e      	bne.n	8002dca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d828      	bhi.n	8002d66 <UART_SetConfig+0x44a>
 8002d14:	a201      	add	r2, pc, #4	@ (adr r2, 8002d1c <UART_SetConfig+0x400>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d41 	.word	0x08002d41
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	08002d51 	.word	0x08002d51
 8002d28:	08002d67 	.word	0x08002d67
 8002d2c:	08002d57 	.word	0x08002d57
 8002d30:	08002d67 	.word	0x08002d67
 8002d34:	08002d67 	.word	0x08002d67
 8002d38:	08002d67 	.word	0x08002d67
 8002d3c:	08002d5f 	.word	0x08002d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d40:	f7fe ffcc 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002d44:	61f8      	str	r0, [r7, #28]
        break;
 8002d46:	e014      	b.n	8002d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d48:	f7fe ffde 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 8002d4c:	61f8      	str	r0, [r7, #28]
        break;
 8002d4e:	e010      	b.n	8002d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d50:	4b4d      	ldr	r3, [pc, #308]	@ (8002e88 <UART_SetConfig+0x56c>)
 8002d52:	61fb      	str	r3, [r7, #28]
        break;
 8002d54:	e00d      	b.n	8002d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d56:	f7fe ff29 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8002d5a:	61f8      	str	r0, [r7, #28]
        break;
 8002d5c:	e009      	b.n	8002d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d62:	61fb      	str	r3, [r7, #28]
        break;
 8002d64:	e005      	b.n	8002d72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d077      	beq.n	8002e68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005a      	lsls	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	441a      	add	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2b0f      	cmp	r3, #15
 8002d92:	d916      	bls.n	8002dc2 <UART_SetConfig+0x4a6>
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9a:	d212      	bcs.n	8002dc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f023 030f 	bic.w	r3, r3, #15
 8002da4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	8afb      	ldrh	r3, [r7, #22]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	8afa      	ldrh	r2, [r7, #22]
 8002dbe:	60da      	str	r2, [r3, #12]
 8002dc0:	e052      	b.n	8002e68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002dc8:	e04e      	b.n	8002e68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d827      	bhi.n	8002e22 <UART_SetConfig+0x506>
 8002dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd8 <UART_SetConfig+0x4bc>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002e05 	.word	0x08002e05
 8002de0:	08002e0d 	.word	0x08002e0d
 8002de4:	08002e23 	.word	0x08002e23
 8002de8:	08002e13 	.word	0x08002e13
 8002dec:	08002e23 	.word	0x08002e23
 8002df0:	08002e23 	.word	0x08002e23
 8002df4:	08002e23 	.word	0x08002e23
 8002df8:	08002e1b 	.word	0x08002e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7fe ff6e 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002e00:	61f8      	str	r0, [r7, #28]
        break;
 8002e02:	e014      	b.n	8002e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7fe ff80 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 8002e08:	61f8      	str	r0, [r7, #28]
        break;
 8002e0a:	e010      	b.n	8002e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <UART_SetConfig+0x56c>)
 8002e0e:	61fb      	str	r3, [r7, #28]
        break;
 8002e10:	e00d      	b.n	8002e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e12:	f7fe fecb 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8002e16:	61f8      	str	r0, [r7, #28]
        break;
 8002e18:	e009      	b.n	8002e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e1e:	61fb      	str	r3, [r7, #28]
        break;
 8002e20:	e005      	b.n	8002e2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e2c:	bf00      	nop
    }

    if (pclk != 0U)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d019      	beq.n	8002e68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	085a      	lsrs	r2, r3, #1
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	d909      	bls.n	8002e62 <UART_SetConfig+0x546>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e54:	d205      	bcs.n	8002e62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	e002      	b.n	8002e68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3728      	adds	r7, #40	@ 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e82:	bf00      	nop
 8002e84:	40008000 	.word	0x40008000
 8002e88:	00f42400 	.word	0x00f42400

08002e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01a      	beq.n	8002fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f8a:	d10a      	bne.n	8002fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b098      	sub	sp, #96	@ 0x60
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fe0:	f7fd fd92 	bl	8000b08 <HAL_GetTick>
 8002fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d12e      	bne.n	8003052 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f88c 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d021      	beq.n	8003052 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800301c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003022:	653b      	str	r3, [r7, #80]	@ 0x50
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800302c:	647b      	str	r3, [r7, #68]	@ 0x44
 800302e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800303a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e6      	bne.n	800300e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e062      	b.n	8003118 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d149      	bne.n	80030f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003068:	2200      	movs	r2, #0
 800306a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f856 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d03c      	beq.n	80030f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	623b      	str	r3, [r7, #32]
   return(result);
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800308e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003098:	633b      	str	r3, [r7, #48]	@ 0x30
 800309a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800309e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e6      	bne.n	800307a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3308      	adds	r3, #8
 80030ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030cc:	61fa      	str	r2, [r7, #28]
 80030ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	69b9      	ldr	r1, [r7, #24]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	617b      	str	r3, [r7, #20]
   return(result);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e5      	bne.n	80030ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e011      	b.n	8003118 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3758      	adds	r7, #88	@ 0x58
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003130:	e04f      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d04b      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fd fce5 	bl	8000b08 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <UART_WaitOnFlagUntilTimeout+0x30>
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e04e      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d037      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b80      	cmp	r3, #128	@ 0x80
 8003166:	d034      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b40      	cmp	r3, #64	@ 0x40
 800316c:	d031      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b08      	cmp	r3, #8
 800317a:	d110      	bne.n	800319e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f838 	bl	80031fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2208      	movs	r2, #8
 800318e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e029      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ac:	d111      	bne.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f81e 	bl	80031fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e00f      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	429a      	cmp	r2, r3
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d0a0      	beq.n	8003132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b095      	sub	sp, #84	@ 0x54
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003220:	643b      	str	r3, [r7, #64]	@ 0x40
 8003222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e6      	bne.n	8003202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3308      	adds	r3, #8
 800323a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	61fb      	str	r3, [r7, #28]
   return(result);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3308      	adds	r3, #8
 8003252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003254:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800325a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e5      	bne.n	8003234 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	2b01      	cmp	r3, #1
 800326e:	d118      	bne.n	80032a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	60bb      	str	r3, [r7, #8]
   return(result);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f023 0310 	bic.w	r3, r3, #16
 8003284:	647b      	str	r3, [r7, #68]	@ 0x44
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6979      	ldr	r1, [r7, #20]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	613b      	str	r3, [r7, #16]
   return(result);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e6      	bne.n	8003270 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032b6:	bf00      	nop
 80032b8:	3754      	adds	r7, #84	@ 0x54
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <memset>:
 80032c2:	4402      	add	r2, r0
 80032c4:	4603      	mov	r3, r0
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d100      	bne.n	80032cc <memset+0xa>
 80032ca:	4770      	bx	lr
 80032cc:	f803 1b01 	strb.w	r1, [r3], #1
 80032d0:	e7f9      	b.n	80032c6 <memset+0x4>
	...

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4d0d      	ldr	r5, [pc, #52]	@ (800330c <__libc_init_array+0x38>)
 80032d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003310 <__libc_init_array+0x3c>)
 80032da:	1b64      	subs	r4, r4, r5
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	2600      	movs	r6, #0
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003314 <__libc_init_array+0x40>)
 80032e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003318 <__libc_init_array+0x44>)
 80032e8:	f000 f818 	bl	800331c <_init>
 80032ec:	1b64      	subs	r4, r4, r5
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	2600      	movs	r6, #0
 80032f2:	42a6      	cmp	r6, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fc:	4798      	blx	r3
 80032fe:	3601      	adds	r6, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f855 3b04 	ldr.w	r3, [r5], #4
 8003306:	4798      	blx	r3
 8003308:	3601      	adds	r6, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	080033e0 	.word	0x080033e0
 8003310:	080033e0 	.word	0x080033e0
 8003314:	080033e0 	.word	0x080033e0
 8003318:	080033e4 	.word	0x080033e4

0800331c <_init>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	bf00      	nop
 8003320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003322:	bc08      	pop	{r3}
 8003324:	469e      	mov	lr, r3
 8003326:	4770      	bx	lr

08003328 <_fini>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr
